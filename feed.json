{
	"version": "https://jsonfeed.org/version/1",
	"title": "Simeon Vincent",
	"icon": "https://micro.blog/dotproto/avatar.jpg",
	"home_page_url": "https://dotproto.com/",
	"feed_url": "https://dotproto.com/feed.json",
	"items": [
		
			{
				"id": "http://dotproto.micro.blog/2024/04/10/open-in-vsc.html",
				"title": "Open in VSC with Shortcuts on macOS",
				"content_html": "<p>I&rsquo;m not sure why, but for some reason this morning it occurred to me that I could probably use Shortcuts on macOS to improve my day-to-day workflow. Often when poking around in Finder I want to open a given directory in <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> (VSC). My normal workflow is:</p>\n<ol>\n<li><!-- raw HTML omitted -->Cmd+Tab<!-- raw HTML omitted --> over VSC</li>\n<li>Hit <!-- raw HTML omitted -->Cmd+Shift+N<!-- raw HTML omitted --> to create a new window</li>\n<li><!-- raw HTML omitted -->Cmd+Tab<!-- raw HTML omitted --> back to the Finder window</li>\n<li>Drag the directory onto the new VSC window</li>\n</ol>\n<p>This works well enough, but one glaring problem with this workflow: I&rsquo;m lazy.</p>\n<p>I&rsquo;d love to be able to just right-click the directory in Finder and open it directly in VS Code. I&rsquo;ve used Automator to set this up in the past, but it was more awkward than I&rsquo;d like. Also, I lost that automation one or two laptop migrations ago, so I couldn&rsquo;t even use it if I wanted to.</p>\n<p>Turns out this is pretty easy to do in Shortcuts … if you know what you&rsquo;re doing. I don&rsquo;t, so I fumbled around for a while. So, here&rsquo;s the tutorial I wish I had 20 minutes ago.</p>\n<ol>\n<li>\n<p>Open Shortcuts.</p>\n</li>\n<li>\n<p>Click the &ldquo;Quick Actions&rdquo; category in the left sidebar.</p>\n<p><em>Note: This isn&rsquo;t strictly necessary, it just helps make setting up the shortcut input a little faster</em></p>\n</li>\n<li>\n<p>Click the + icon in the toolbar to create a new shortcut.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</li>\n<li>\n<p>Change the input type from &ldquo;Images and 18 more&rdquo; to &ldquo;Files and Folders&rdquo;.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</li>\n<li>\n<p>Click &ldquo;Quick actions&rdquo; to choose what kind of actions can invoke this shortcut. In this case, I only wanted to use the shortcut inside Finder.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</li>\n<li>\n<p>Under &ldquo;If there&rsquo;s no input&rdquo;, change this value to &ldquo;Stop and respond&rdquo;.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><em>Note: This will prevent the shortcut from doing anything if it was invoked without the right kind of input.</em></p>\n</li>\n<li>\n<p>Next, switch the right view back to the Action Library, search for &ldquo;Run Shell Script&rdquo;, and either double-click it or drag it below the input box we just configured.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</li>\n<li>\n<p>Change the &ldquo;Input&rdquo; dropdown to &ldquo;Shortcut Input&rdquo; and the &ldquo;Pass Input&rdquo; dropdown to &ldquo;as arguments&rdquo;.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</li>\n<li>\n<p>Change the shell script from <code>echo &quot;Hello World&quot;</code> to <code>code &quot;$1&quot;</code>.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><em>Note: <code>$1</code> refers to the first argument passed to the shell script. We surround it with quotes in order to make sure paths that contain spaces work as expected.</em></p>\n</li>\n<li>\n<p>Let&rsquo;s warp this up by giving the shortcut an icon and name. Change the name by clicking on &ldquo;Run shell script&rdquo; in the title and typing the new title. Change the icon by clicking the icon in the title bar and selecting the icon and color you want to use. I went with &ldquo;circled right arrow&rdquo; in Blue.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</li>\n</ol>\n<p>And with that, you should now be able to right-click on a folder in Finder, open Quick Actions, and select &ldquo;Open in VSC&rdquo;. Happy shortcutting ;)</p>\n",
				"content_text": "I'm not sure why, but for some reason this morning it occurred to me that I could probably use Shortcuts on macOS to improve my day-to-day workflow. Often when poking around in Finder I want to open a given directory in [Visual Studio Code](https://code.visualstudio.com/) (VSC). My normal workflow is:\n\n1. <kbd>Cmd+Tab</kbd> over VSC\n2. Hit <kbd>Cmd+Shift+N</kbd> to create a new window\n3. <kbd>Cmd+Tab</kbd> back to the Finder window\n4. Drag the directory onto the new VSC window\n\nThis works well enough, but one glaring problem with this workflow: I'm lazy.\n\nI'd love to be able to just right-click the directory in Finder and open it directly in VS Code. I've used Automator to set this up in the past, but it was more awkward than I'd like. Also, I lost that automation one or two laptop migrations ago, so I couldn't even use it if I wanted to.\n\nTurns out this is pretty easy to do in Shortcuts … if you know what you're doing. I don't, so I fumbled around for a while. So, here's the tutorial I wish I had 20 minutes ago.\n\n1. Open Shortcuts.\n\n2. Click the \"Quick Actions\" category in the left sidebar. \n\n   _Note: This isn't strictly necessary, it just helps make setting up the shortcut input a little faster_\n\n3. Click the + icon in the toolbar to create a new shortcut.\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-quick-actions.png\"><img src=\"uploads/2024/shortcuts-quick-actions.png\" width=\"300\"></a>\n\n5. Change the input type from \"Images and 18 more\" to \"Files and Folders\".\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-files-and-folders.png\"><img src=\"uploads/2024/shortcuts-files-and-folders.png\" width=\"300\"></a>\n \n6. Click \"Quick actions\" to choose what kind of actions can invoke this shortcut. In this case, I only wanted to use the shortcut inside Finder.\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-finder.png\"><img src=\"uploads/2024/shortcuts-finder.png\" width=\"300\"></a>\n\n7. Under \"If there's no input\", change this value to \"Stop and respond\".\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-no-input.png\"><img src=\"uploads/2024/shortcuts-no-input.png\" width=\"300\"></a>\n\n    _Note: This will prevent the shortcut from doing anything if it was invoked without the right kind of input._\n\n8. Next, switch the right view back to the Action Library, search for \"Run Shell Script\", and either double-click it or drag it below the input box we just configured.\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-run-shell-script.png\"><img src=\"uploads/2024/shortcuts-run-shell-script.png\" width=\"300\"></a>\n\n9. Change the \"Input\" dropdown to \"Shortcut Input\" and the \"Pass Input\" dropdown to \"as arguments\".\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-run-shell-script.png\"><img src=\"uploads/2024/shortcuts-run-shell-script.png\" width=\"300\"></a>\n\n10. Change the shell script from `echo \"Hello World\"` to `code \"$1\"`.\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-run-code.png\"><img src=\"uploads/2024/shortcuts-run-code.png\" width=\"300\"></a>\n\n    _Note: `$1` refers to the first argument passed to the shell script. We surround it with quotes in order to make sure paths that contain spaces work as expected._\n   \n11. Let's warp this up by giving the shortcut an icon and name. Change the name by clicking on \"Run shell script\" in the title and typing the new title. Change the icon by clicking the icon in the title bar and selecting the icon and color you want to use. I went with \"circled right arrow\" in Blue.\n\n    <a href=\"https://dotproto.com/uploads/2024/shortcuts-circled-right-arrow.png\"><img src=\"uploads/2024/shortcuts-circled-right-arrow.png\" width=\"300\"></a>\n\nAnd with that, you should now be able to right-click on a folder in Finder, open Quick Actions, and select \"Open in VSC\". Happy shortcutting ;)\n",
				"date_published": "2024-04-11T00:06:55+01:00",
				"url": "https://dotproto.com/2024/04/10/open-in-vsc.html",
				"tags": ["personal life"]
			},
			{
				"id": "http://dotproto.micro.blog/2023/06/01/cws-poliy-diff.html",
				"title": "CWS Policy Diff - May 30, 2023",
				"content_html": "<p>Another few months have passed and the Chrome team has published another set of updates to the Chrome Web Store&rsquo;s (CWS&rsquo;s) <a href=\"https://developer.chrome.com/docs/webstore/program-policies/\">Program Policies</a>. Typically the Chrome team would announce this kind of update with a blog post as well as an email to developers, this time they only sent out the developer email (<a href=\"https://groups.google.com/a/chromium.org/g/chromium-extensions/c/2KWhd7nFFJs/m/-NDQ4tI3AQAJ\">reposted publicly</a> by <a href=\"https://www.stefanvd.net/blog/\">Stefan Van Damme</a>). They probably skipped the blog post this time because of the small scale of the update, both in lines of text and impact.</p>\n<p>In this post I&rsquo;ll be walking through what changed, thinking out loud about likely motivations, and sprinkling in additional context about policies and the broader ecosystem.</p>\n<h2 id=\"quality-guidelines\">Quality Guidelines</h2>\n<p>This is the only section of the policy text that was updated. Before this update, the <a href=\"https://developer.chrome.com/docs/webstore/program-policies/quality-guidelines/\">Quality Guidelines</a> were a little weird in that they only had a single top level bullet. Well, now there are two!</p>\n<blockquote>\n<p><strong>(2)</strong> When designing an extension, it&rsquo;s important to ensure it functions as a helpful companion to users' browsing experiences by providing complementary functionality. If utilizing a persistent user interface, extensions should actively enhance the user&rsquo;s current task while causing minimal distractions. Some common violations include:</p>\n<p><strong>(2.1)</strong> Side panel extensions which hijack a user’s browsing or search experience.</p>\n<p><strong>(2.2)</strong> Extensions with the primary purpose of serving ads.</p>\n</blockquote>\n<p>This change was almost certainly inspired by the introduction of the <a href=\"https://developer.chrome.com/docs/extensions/reference/sidePanel/\">Side Panel API</a> (<a href=\"https://developer.chrome.com/blog/extension-side-panel-launch/\">announcement post</a>) and it&rsquo;s likely abuse vectors. (A few hours later…) Turns out Oliver, a Chrome Extensions DevRel Engineer, basically said as much <a href=\"https://groups.google.com/a/chromium.org/g/chromium-extensions/c/2KWhd7nFFJs/m/FdTuXxV8AQAJ\">in this post</a>:</p>\n<blockquote>\n<p>The context was the launch of the Side Panel API … the goal was just to have some language in place to make it clear that similar policies to our existing ones (single purpose, not providing particularly distracting experiences) also apply to the side panel&quot;</p>\n</blockquote>\n<p>For a quick recap, Chrome&rsquo;s side panel is essentially a separate web page that is attached to the side of your browser window. Since the side panel is persistent, it has a lot of potential to augment and enhance the user&rsquo;s browsing experience, but with great power etc.</p>\n<p>A persistent UI surface virtually guarantees that not-so-great actors will try to crap up the user experience. As such, this new policy text is almost certainly aiming to both steer developers away from abusive patterns and to arm reviewers with tools to take action against those poor user experiences.</p>\n<p><strong>2.1</strong> is worth quickly touching on because browser hijacking is a common problem in the extension ecosystem and is a significant source of confusion/frustration for users. (See <a href=\"/2023/06/06/a-warning-about.html\">my last blog post</a> for another related discussion.) I&rsquo;m honestly a little surprised to see it mentioned here as other policies also cover search hijacking, but, admittedly, not as directly.</p>\n<p>As a brief reminder, if you want to expose a generic search box in your extension, you must respect the user&rsquo;s preferences by using <a href=\"https://developer.chrome.com/docs/extensions/reference/search/#method-query\"><code>chrome.search.query()</code></a> in Chromium (or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/search/search\"><code>browser.search.search()</code></a> in Firefox) to execute a search using the currently selected default search provider.</p>\n<p><strong>2.2</strong> is interesting to me because as it explicitly prohibits extensions with the single purpose of displaying ads. This may not be common knowledge, but to the best of my knowledge this used to be an acceptable single purpose. Now it&rsquo;s explicitly prohibited. If nothing else it&rsquo;s worth acknowledging the shift here.</p>\n<p>I don&rsquo;t think I ever encountered an extension with the sole purpose of injecting a bunch of ads on a page. Well, at least if you don&rsquo;t count extensions that inject referral links on everything they can. Don&rsquo;t do that. It used to be a decently effective way to get on the wrong side of a malware verdict for &ldquo;[interfering] with the operation of the networks, servers, or other infrastructure of … any third-parties&rdquo; (<a href=\"https://developer.chrome.com/docs/webstore/program-policies/malicious-and-prohibited/\">source</a>).</p>\n<p>That may sound harsh, but the problem is that when an extension clobbers existing referral links on a site, they effectively steal the referral traffic created by that site. While referral hijacking and content blocking both interfere with a website&rsquo;s revenue streams, there&rsquo;s a critical difference in the incentives. Content blocking has security/privacy benefits for the user and monetize through subscriptions or donations. Referral hijacking doesn&rsquo;t improve user security (arguably it actually exposes more information via referrals) and every referral link directly benefits the extension&rsquo;s developer.</p>\n<p>Still, it was very easy for a well-meaning but overzealous developer to get caught on the wrong side of referral hijacking enforcement. Before this, the malware policy was the best match to take action on referral hijacking, but <a href=\"https://developer.chrome.com/docs/webstore/review-process/#malware\">malware verdicts</a> cannot be appealed and Google will not share details about the nature of the violation the developer.</p>\n<p>Now, I don&rsquo;t know if this is what Chrome policy folks had in mind, but that this new language <em>might</em> give reviewers a way to notify developers that they&rsquo;ve crossed the line on ads without having to go straight to a malware verdict. Time will tell how this plays out.</p>\n<h2 id=\"best-practices-and-guidelineshttpsdeveloperchromecomdocswebstoreprogram-policiesbest-practices\"><a href=\"https://developer.chrome.com/docs/webstore/program-policies/best-practices/\">Best Practices and Guidelines</a></h2>\n<p>This page has been updated with a few new bullets that highlight a couple of things that often trip developers up. IMO it&rsquo;s a good set of changes all around.</p>\n<blockquote>\n<p><strong>(1)</strong> Research and understand the Chrome Web Store policies. Before developing a Chrome extension, it is important to review the Chrome Web Store Developer Program Policies and ensure your extension complies with all guidelines and requirements.</p>\n</blockquote>\n<p>I think it makes senes to call this out at the top of the list. IMO policy compliance is an under-appreciated and often overlooked aspect of publishing an extension on CWS.</p>\n<p>CWS Developer Policies aren&rsquo;t meant to make developer&rsquo;s lives harder. For the most part, they are just putting up guard rails in order to protect users. I&rsquo;ve seen too many extensions that disregard user privacy, products built on the gray areas of policy, and extension developers that are genuinely surprised when they get hit for what seem to me to be obvious policy violations. CWS policies serve as a minimum bar that says &ldquo;yeah, maybe you shouldn&rsquo;t be doing that.&rdquo;</p>\n<p><strong>Shameless plug:</strong> if you need help with navigating CWS policy compliance or navigating a takedown, I can help. Use the contact link on <a href=\"https://incremental.software/\">incremental.software</a> to learn more.</p>\n<blockquote>\n<p><strong>(4)</strong> Developers must strictly adhere to <a href=\"https://developer.chrome.com/docs/webstore/program-policies/#protecting-user-privacy\">strict guidelines</a> regarding the collection, use, and disclosure of user data, and must obtain user consent for any data collection or usage. Apps that access sensitive user data such as financial information, health information, or personal information must comply with additional policies and guidelines.</p>\n</blockquote>\n<p>This is a great addition. Users are increasingly aware of and uncomfortable with software data collection practices. Data collection is also a very common cause of submission rejections and extension takedowns.</p>\n<p>Developers stumble around data collection due (in part) to the <a href=\"https://en.wikipedia.org/wiki/Curse_of_knowledge\">curse of knowledge</a>. Often extension developers understand what data they&rsquo;re accessing, what tradeoffs they&rsquo;re making around privacy and security, why data collection feels appropriate for their use case, and ultimately that they are just good folks trying hard to make something their users will enjoy. In these situations, the problem is often that the developer forgets to communicate these considerations to end users (and by extension reviewers).</p>\n<p>Beyond that, users and reviewers aren&rsquo;t just worried about how the extension might use their data, they&rsquo;re also worried about what might happen if the extension&rsquo;s <a href=\"https://learn.microsoft.com/en-us/microsoft-365/security/intelligence/supply-chain-malware\">supply chain is compromised</a> or it&rsquo;s  <a href=\"https://en.wikipedia.org/wiki/Database_dump\">database gets dumped</a>. Developers have a tendency to focus on <a href=\"https://en.wikipedia.org/wiki/Happy_path\">happy paths</a> and forget to consider how another party might (say a hacker or a new owner) abuse or misuse the data they&rsquo;ve collected.</p>\n<p>Speaking of which, I <em>strongly</em> encourage all extension developers to be extremely cautious of unsolicited emails about extension monetization schemes. I&rsquo;ve <a href=\"/2023/06/06/a-warning-about.html\">recently written</a> more about this, but as a short summary they want you to add a little JS to your extension so they can harvest your user&rsquo;s data (see also <a href=\"https://en.wikipedia.org/wiki/Data_broker\">data broker</a>). This practice is forbidden by CWS policy and will very likely get your extension flagged as malware and there&rsquo;s no coming back from that. Don&rsquo;t be the pawn in someone else&rsquo;s game.</p>\n<blockquote>\n<p><strong>(10)</strong> Chrome Web Store policies are subject to change. Google may update the policies at any time, and developers are responsible for keeping up-to-date with any changes and complying with the updated policies. Updates to our policies will be announced via email to the address listed in your developer account.</p>\n</blockquote>\n<p>This new item appears as the final entry in the best practice list and IMO serves as a nice end-cap.</p>\n<p>Developers may not realize it, but CWS policies are regularly updated in response to the evolutions of browser extension ecosystem and broader software landscape. User expectations are changing, new threats emerge, active exploits and abuse campaigns are refined, legal requirements are shifting, the API surface evolves, and at the end of the day we&rsquo;re all just trying to ship software.</p>\n<p>I&rsquo;m also trying to do what I can to help here; I wrote this post with the hope that it will help make the browser extension policy compliance process a little more explicable. If you have any feedback on this post, you can reach me on Mastodon at <a href=\"https://toot.cafe/@dotproto\">@dotproto@toot.cafe</a> or use Mastodon to comment directly on this post.</p>\n",
				"content_text": "Another few months have passed and the Chrome team has published another set of updates to the Chrome Web Store's (CWS's) [Program Policies](https://developer.chrome.com/docs/webstore/program-policies/). Typically the Chrome team would announce this kind of update with a blog post as well as an email to developers, this time they only sent out the developer email ([reposted publicly](https://groups.google.com/a/chromium.org/g/chromium-extensions/c/2KWhd7nFFJs/m/-NDQ4tI3AQAJ) by [Stefan Van Damme](https://www.stefanvd.net/blog/)). They probably skipped the blog post this time because of the small scale of the update, both in lines of text and impact. \n\nIn this post I'll be walking through what changed, thinking out loud about likely motivations, and sprinkling in additional context about policies and the broader ecosystem.\n\n## Quality Guidelines \n\nThis is the only section of the policy text that was updated. Before this update, the [Quality Guidelines](https://developer.chrome.com/docs/webstore/program-policies/quality-guidelines/) were a little weird in that they only had a single top level bullet. Well, now there are two!\n\n> **(2)** When designing an extension, it's important to ensure it functions as a helpful companion to users' browsing experiences by providing complementary functionality. If utilizing a persistent user interface, extensions should actively enhance the user's current task while causing minimal distractions. Some common violations include:\n> \n> **(2.1)** Side panel extensions which hijack a user’s browsing or search experience. \n> \n> **(2.2)** Extensions with the primary purpose of serving ads.\n\nThis change was almost certainly inspired by the introduction of the [Side Panel API](https://developer.chrome.com/docs/extensions/reference/sidePanel/) ([announcement post](https://developer.chrome.com/blog/extension-side-panel-launch/)) and it's likely abuse vectors. (A few hours later…) Turns out Oliver, a Chrome Extensions DevRel Engineer, basically said as much [in this post](https://groups.google.com/a/chromium.org/g/chromium-extensions/c/2KWhd7nFFJs/m/FdTuXxV8AQAJ):\n\n> The context was the launch of the Side Panel API … the goal was just to have some language in place to make it clear that similar policies to our existing ones (single purpose, not providing particularly distracting experiences) also apply to the side panel\" \n\nFor a quick recap, Chrome's side panel is essentially a separate web page that is attached to the side of your browser window. Since the side panel is persistent, it has a lot of potential to augment and enhance the user's browsing experience, but with great power etc.\n\nA persistent UI surface virtually guarantees that not-so-great actors will try to crap up the user experience. As such, this new policy text is almost certainly aiming to both steer developers away from abusive patterns and to arm reviewers with tools to take action against those poor user experiences.\n\n**2.1** is worth quickly touching on because browser hijacking is a common problem in the extension ecosystem and is a significant source of confusion/frustration for users. (See [my last blog post](/2023/06/06/a-warning-about.html) for another related discussion.) I'm honestly a little surprised to see it mentioned here as other policies also cover search hijacking, but, admittedly, not as directly.\n\nAs a brief reminder, if you want to expose a generic search box in your extension, you must respect the user's preferences by using [`chrome.search.query()`](https://developer.chrome.com/docs/extensions/reference/search/#method-query) in Chromium (or [`browser.search.search()`](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/search/search) in Firefox) to execute a search using the currently selected default search provider.\n\n**2.2** is interesting to me because as it explicitly prohibits extensions with the single purpose of displaying ads. This may not be common knowledge, but to the best of my knowledge this used to be an acceptable single purpose. Now it's explicitly prohibited. If nothing else it's worth acknowledging the shift here.\n\nI don't think I ever encountered an extension with the sole purpose of injecting a bunch of ads on a page. Well, at least if you don't count extensions that inject referral links on everything they can. Don't do that. It used to be a decently effective way to get on the wrong side of a malware verdict for \"[interfering] with the operation of the networks, servers, or other infrastructure of … any third-parties\" ([source](https://developer.chrome.com/docs/webstore/program-policies/malicious-and-prohibited/)).\n\nThat may sound harsh, but the problem is that when an extension clobbers existing referral links on a site, they effectively steal the referral traffic created by that site. While referral hijacking and content blocking both interfere with a website's revenue streams, there's a critical difference in the incentives. Content blocking has security/privacy benefits for the user and monetize through subscriptions or donations. Referral hijacking doesn't improve user security (arguably it actually exposes more information via referrals) and every referral link directly benefits the extension's developer. \n\nStill, it was very easy for a well-meaning but overzealous developer to get caught on the wrong side of referral hijacking enforcement. Before this, the malware policy was the best match to take action on referral hijacking, but [malware verdicts](https://developer.chrome.com/docs/webstore/review-process/#malware) cannot be appealed and Google will not share details about the nature of the violation the developer.\n\nNow, I don't know if this is what Chrome policy folks had in mind, but that this new language _might_ give reviewers a way to notify developers that they've crossed the line on ads without having to go straight to a malware verdict. Time will tell how this plays out.\n\n## [Best Practices and Guidelines](https://developer.chrome.com/docs/webstore/program-policies/best-practices/)\n\nThis page has been updated with a few new bullets that highlight a couple of things that often trip developers up. IMO it's a good set of changes all around.\n\n> **(1)** Research and understand the Chrome Web Store policies. Before developing a Chrome extension, it is important to review the Chrome Web Store Developer Program Policies and ensure your extension complies with all guidelines and requirements.\n\nI think it makes senes to call this out at the top of the list. IMO policy compliance is an under-appreciated and often overlooked aspect of publishing an extension on CWS.\n\nCWS Developer Policies aren't meant to make developer's lives harder. For the most part, they are just putting up guard rails in order to protect users. I've seen too many extensions that disregard user privacy, products built on the gray areas of policy, and extension developers that are genuinely surprised when they get hit for what seem to me to be obvious policy violations. CWS policies serve as a minimum bar that says \"yeah, maybe you shouldn't be doing that.\"\n\n**Shameless plug:** if you need help with navigating CWS policy compliance or navigating a takedown, I can help. Use the contact link on [incremental.software](https://incremental.software/) to learn more.\n\n> **(4)** Developers must strictly adhere to [strict guidelines](https://developer.chrome.com/docs/webstore/program-policies/#protecting-user-privacy) regarding the collection, use, and disclosure of user data, and must obtain user consent for any data collection or usage. Apps that access sensitive user data such as financial information, health information, or personal information must comply with additional policies and guidelines.\n\nThis is a great addition. Users are increasingly aware of and uncomfortable with software data collection practices. Data collection is also a very common cause of submission rejections and extension takedowns.\n\nDevelopers stumble around data collection due (in part) to the [curse of knowledge](https://en.wikipedia.org/wiki/Curse_of_knowledge). Often extension developers understand what data they're accessing, what tradeoffs they're making around privacy and security, why data collection feels appropriate for their use case, and ultimately that they are just good folks trying hard to make something their users will enjoy. In these situations, the problem is often that the developer forgets to communicate these considerations to end users (and by extension reviewers). \n\nBeyond that, users and reviewers aren't just worried about how the extension might use their data, they're also worried about what might happen if the extension's [supply chain is compromised](https://learn.microsoft.com/en-us/microsoft-365/security/intelligence/supply-chain-malware) or it's  [database gets dumped](https://en.wikipedia.org/wiki/Database_dump). Developers have a tendency to focus on [happy paths](https://en.wikipedia.org/wiki/Happy_path) and forget to consider how another party might (say a hacker or a new owner) abuse or misuse the data they've collected. \n\nSpeaking of which, I _strongly_ encourage all extension developers to be extremely cautious of unsolicited emails about extension monetization schemes. I've [recently written](/2023/06/06/a-warning-about.html) more about this, but as a short summary they want you to add a little JS to your extension so they can harvest your user's data (see also [data broker](https://en.wikipedia.org/wiki/Data_broker)). This practice is forbidden by CWS policy and will very likely get your extension flagged as malware and there's no coming back from that. Don't be the pawn in someone else's game.\n\n> **(10)** Chrome Web Store policies are subject to change. Google may update the policies at any time, and developers are responsible for keeping up-to-date with any changes and complying with the updated policies. Updates to our policies will be announced via email to the address listed in your developer account. \n\nThis new item appears as the final entry in the best practice list and IMO serves as a nice end-cap.\n\nDevelopers may not realize it, but CWS policies are regularly updated in response to the evolutions of browser extension ecosystem and broader software landscape. User expectations are changing, new threats emerge, active exploits and abuse campaigns are refined, legal requirements are shifting, the API surface evolves, and at the end of the day we're all just trying to ship software. \n\nI'm also trying to do what I can to help here; I wrote this post with the hope that it will help make the browser extension policy compliance process a little more explicable. If you have any feedback on this post, you can reach me on Mastodon at [@dotproto@toot.cafe](https://toot.cafe/@dotproto) or use Mastodon to comment directly on this post.\n",
				"date_published": "2023-06-13T01:44:16+01:00",
				"url": "https://dotproto.com/2023/06/01/cws-poliy-diff.html",
				"tags": ["webextensions","cws-policy"]
			},
			{
				"id": "http://dotproto.micro.blog/2023/06/06/a-warning-about.html",
				"title": "A warning about monetizing extensions with search",
				"content_html": "<p><em>This post is based on <a href=\"https://groups.google.com/a/chromium.org/g/chromium-extensions/c/axnSqOfoPpo/m/BEf0VhIYAAAJ\">a comment I shared</a> on the <a href=\"https://groups.google.com/a/chromium.org/g/chromium-extensions/\">chromium-extensions</a> group.</em></p>\n<p>It&rsquo;s a frustratingly frequent experience for extension developers: you&rsquo;re going through your customer feedback sent to your contact email address (a <a href=\"https://developer.chrome.com/docs/webstore/terms/#:~:text=You%20agree%20to%20supply%20and%20maintain%20valid%20and%20accurate%20contact%20information%20that%20will%20be%20displayed%20in%20each%20product%20detail%20page\">CWS requirement</a>) and you come across something like this:</p>\n<blockquote>\n<p>I&rsquo;m reaching out to you concerning the potential revenue generation from your Chrome Extension, <!-- raw HTML omitted -->. We are keen on offering our premium product, Bing Hosted Feed, which is a high-quality search solution.</p>\n<p>This represents an excellent chance to incorporate a search feature into your Chrome extension, thereby monetizing your users' search activities. With this integration, you stand to earn up to $500 per month for every 1,000 users, paving the way for an extra passive income stream from your extension.</p>\n<p>Even if your extension currently lacks a search function, there&rsquo;s no cause for concern. We are fully prepared to guide you through a straightforward update process to incorporate the search function. This update is fully compliant with Google Chrome store&rsquo;s guidelines, and should you find it unsatisfactory, you&rsquo;re always free to revert the changes at any point.</p>\n</blockquote>\n<p>I don&rsquo;t fault anyone for being tempted by this kind of offer; it&rsquo;s hard not to be intrigued by solid money in exchange for a seemingly minor integration. But if something seems too good to be true, it probably is. Despite their claims, I&rsquo;d bet dollars to doughnuts that what they&rsquo;re doing doesn&rsquo;t comply with CWS policy. Worse, these services may well end up getting your extension flagged as malware.</p>\n<p>Let&rsquo;s talk about what these kinds of monetization schemes typically ask of developers, look at some relevant Chrome Web Store policies, and see why integrating with them will likely land you in hot water.</p>\n<h2 id=\"what-they-want\">What they want</h2>\n<p>The people behind these emails want to replace the user&rsquo;s search engine with something that pays them for that traffic.</p>\n<p>Why? Because search is very valuable. While it&rsquo;s hard to find solid numbers on exactly <em>how</em> valuable, <a href=\"https://www.theverge.com/2023/3/9/23631912/microsoft-bing-100-million-daily-active-users-milestone\">Philippe Ockenden</a>, Microsoft&rsquo;s Corporate Vice President of Finance, said on an investor call that &ldquo;For every 1 point of share gain in the search advertising market, it&rsquo;s a $2 billion revenue opportunity for our advertising business.&rdquo; That&rsquo;s big money.</p>\n<p>More concretely, the people behind these emails typically want the integrating extension to change the user&rsquo;s default search provider using <a href=\"https://developer.chrome.com/docs/extensions/mv3/settings_override/\">Settings Overrides</a>. In some cases, though, they may ask developers to expose a search box in the extension&rsquo;s UI or on websites. A search box would usually be integrated by adding some pre-defined HTML and their JavaScript library into the target page.</p>\n<p>They don&rsquo;t mention this part, but they&rsquo;re also looking to minimize their own risk at your expense. They know that CWS can only take action against an extension and its developer. So, if the worst happens and the code they asked you to integrate is flagged for malware, <em>your</em> extension will be taken down and your account will be suspended.</p>\n<h2 id=\"chrome-web-store-policies\">Chrome Web Store policies</h2>\n<p>Roughly <a href=\"https://developer.chrome.com/blog/cws-policy-revamp/\">7 months ago</a> Google revamped the <a href=\"https://developer.chrome.com/docs/webstore/program-policies/\">CWS Developer Policies</a> around three principals: be safe, be honest, be useful. These simple statements get to the core of what the policies aim to accomplish: enhance the user&rsquo;s web browsing experience without deception, fraud, mishandling of data, or disregard for the user&rsquo;s wishes.</p>\n<p>I mention that here because search monetization, by its very nature, can be considered a form of browser hijacking. From <a href=\"https://en.wikipedia.org/wiki/Browser_hijacking\">Wikipedia</a>:</p>\n<blockquote>\n<p><strong>Browser hijacking</strong> is a form of <a href=\"https://en.wikipedia.org/wiki/Potentially_unwanted_program\">unwanted software</a> that modifies a <a href=\"https://en.wikipedia.org/wiki/Web_browser\">web browser</a>&rsquo;s settings without a user&rsquo;s permission, to inject unwanted advertising into the user&rsquo;s browser. A browser hijacker may replace the existing <a href=\"https://en.wikipedia.org/wiki/Home_page\">home page</a>, error page, or <a href=\"https://en.wikipedia.org/wiki/Search_engine\">search engine</a> with its own.<a href=\"https://en.wikipedia.org/wiki/Browser_hijacking#cite_note-1\"><!-- raw HTML omitted -->[1]<!-- raw HTML omitted --></a> These are generally used to force <a href=\"https://en.wikipedia.org/wiki/Hit_(Internet)\">hits</a> to a particular <a href=\"https://en.wikipedia.org/wiki/Website\">website</a>, increasing its <a href=\"https://en.wikipedia.org/wiki/Online_advertising\">advertising</a> revenue.</p>\n</blockquote>\n<p>Let&rsquo;s walk through some specific policies in order to see how search monetization may put your extension at risk.</p>\n<h3 id=\"single-purpose-policy\">Single purpose policy</h3>\n<p>CWS has long had a &ldquo;single purpose policy&rdquo; (SPP) that essentially requires each extension have one well-defined raison d&rsquo;être. Generally speaking, this means that all of the features an extension exposes must be part of a unifying theme. This policy is currently captured in the <a href=\"https://developer.chrome.com/docs/webstore/program-policies/quality-guidelines/\">Quality Guidelines</a> policies.</p>\n<p>One area where SPP enforcement is stricter than average, though, is search. For the purposes of CWS review, changing a user&rsquo;s default search provider is considered a distinct purpose. In other words, if the search monetization service instructs you to declare a search provider in your extension&rsquo;s manifest with <code>&quot;is_default&quot;: true</code>, that integration is basically guaranteed to violate this policy.</p>\n<h3 id=\"api-use\">API use</h3>\n<p>The <a href=\"https://developer.chrome.com/docs/webstore/program-policies/api-use/\">API Use</a> policies require that developers &ldquo;use existing Chrome APIs for their designated use case. Use of any other method, for which an API exists, would be considered a violation.&rdquo;  If the extension is exposing a general purpose search box, the extension <em>must</em> use <a href=\"https://developer.chrome.com/docs/extensions/reference/search/#method-query\"><code>chrome.search.query()</code></a> (or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/search/search\"><code>browser.search.search()</code></a> in Firefox) to perform the search.</p>\n<h3 id=\"policies-aimed-at-protecting-user-privacy\">Policies aimed at protecting user privacy</h3>\n<p>Integrating a search monetization service will likely violate a couple of the policies grouped under <a href=\"https://developer.chrome.com/docs/webstore/program-policies/#protecting-user-privacy\">Protecting User Privacy</a>.</p>\n<p>The <a href=\"https://developer.chrome.com/docs/webstore/program-policies/limited-use/\">Limited Use</a> policies requires that user data only be accessed/collected for purposes directly tied to the extension&rsquo;s purpose. Any data collected must be limited &ldquo;to the extent required for a user-facing feature described prominently in the Product&rsquo;s Chrome Web Store page and in the Product&rsquo;s user interface.&rdquo;</p>\n<p>Similarly, the <a href=\"https://developer.chrome.com/docs/webstore/program-policies/disclosure-requirements/\">Disclosure Requirements</a> policies state that extensions must disclose the data they handle (collect, use, or share) and, if necessary, get informed user consent for that handling.</p>\n<p>While one might argue that the extension isn&rsquo;t collecting search data, it directly facilitates sending user data to a 3rd party service which may collect the user&rsquo;s data for advertising purposes. That data would not have been collected but for the fact that the user had the extension installed. At best, that&rsquo;s aiding and abetting – not a great defense to use when trying to get back into good standing.</p>\n<p>Finally, the <a href=\"https://developer.chrome.com/docs/webstore/program-policies/unexpected-behavior/\">Misleading or Unexpected Behavior</a> policies clearly state that extensions must not &ldquo;misrepresent the functionality of your product or include non-obvious functionality that doesn&rsquo;t serve the primary purpose of the product.&rdquo;</p>\n<p>Let&rsquo;s make this a bit more concrete with an example. Say you had an extension that exposed a search field that looked and mostly behaved like a standard search box in your browser. Now say that when you executed a search using that box, the results page was on a website you weren&rsquo;t used to seeing. I think it would be fair to say that the search box didn&rsquo;t behave as expected.</p>\n<h2 id=\"a-compliant-example\">A compliant example</h2>\n<p>At the moment, I can only imagine one situation where it would be appropriate for an extension to execute a search without using the default search provider: if the extension is exposing specialized search capabilities related to its single purpose.</p>\n<p>For example, let&rsquo;s say there is an extension designed to help users find, collect, reference, and site academic papers. This extension could expose a search box that lets users search through the academic databases and industry journals they are signed into. This type of search is directly related to the extension&rsquo;s primary purpose, makes sense in context, respects the user&rsquo;s preferences, and does not introduce new privacy concerns.</p>\n<h2 id=\"wrap-up\">Wrap up</h2>\n<p>Trying to monetize an extension by sending search traffic to a non-standard search provider is, at best, risky business. Browser hijacking is a serious threat to users and anything that looks like it has a very real risk of being classified as malware.</p>\n<p>My advice: steer clear of offers to monetize your extension via search revenue sharing.</p>\n",
				"content_text": "_This post is based on [a comment I shared](https://groups.google.com/a/chromium.org/g/chromium-extensions/c/axnSqOfoPpo/m/BEf0VhIYAAAJ) on the [chromium-extensions](https://groups.google.com/a/chromium.org/g/chromium-extensions/) group._\n\nIt's a frustratingly frequent experience for extension developers: you're going through your customer feedback sent to your contact email address (a [CWS requirement](https://developer.chrome.com/docs/webstore/terms/#:~:text=You%20agree%20to%20supply%20and%20maintain%20valid%20and%20accurate%20contact%20information%20that%20will%20be%20displayed%20in%20each%20product%20detail%20page)) and you come across something like this:\n\n> I'm reaching out to you concerning the potential revenue generation from your Chrome Extension, <EXTENSION NAME>. We are keen on offering our premium product, Bing Hosted Feed, which is a high-quality search solution.\n> \n> This represents an excellent chance to incorporate a search feature into your Chrome extension, thereby monetizing your users' search activities. With this integration, you stand to earn up to $500 per month for every 1,000 users, paving the way for an extra passive income stream from your extension.\n> \n> Even if your extension currently lacks a search function, there's no cause for concern. We are fully prepared to guide you through a straightforward update process to incorporate the search function. This update is fully compliant with Google Chrome store's guidelines, and should you find it unsatisfactory, you're always free to revert the changes at any point.\n\nI don't fault anyone for being tempted by this kind of offer; it's hard not to be intrigued by solid money in exchange for a seemingly minor integration. But if something seems too good to be true, it probably is. Despite their claims, I'd bet dollars to doughnuts that what they're doing doesn't comply with CWS policy. Worse, these services may well end up getting your extension flagged as malware.\n\nLet's talk about what these kinds of monetization schemes typically ask of developers, look at some relevant Chrome Web Store policies, and see why integrating with them will likely land you in hot water.\n\n## What they want\n\nThe people behind these emails want to replace the user's search engine with something that pays them for that traffic. \n\nWhy? Because search is very valuable. While it's hard to find solid numbers on exactly _how_ valuable, [Philippe Ockenden](https://www.theverge.com/2023/3/9/23631912/microsoft-bing-100-million-daily-active-users-milestone), Microsoft's Corporate Vice President of Finance, said on an investor call that \"For every 1 point of share gain in the search advertising market, it's a $2 billion revenue opportunity for our advertising business.\" That's big money.\n\nMore concretely, the people behind these emails typically want the integrating extension to change the user's default search provider using [Settings Overrides](https://developer.chrome.com/docs/extensions/mv3/settings_override/). In some cases, though, they may ask developers to expose a search box in the extension's UI or on websites. A search box would usually be integrated by adding some pre-defined HTML and their JavaScript library into the target page.\n\nThey don't mention this part, but they're also looking to minimize their own risk at your expense. They know that CWS can only take action against an extension and its developer. So, if the worst happens and the code they asked you to integrate is flagged for malware, _your_ extension will be taken down and your account will be suspended.\n\n## Chrome Web Store policies\n\nRoughly [7 months ago](https://developer.chrome.com/blog/cws-policy-revamp/) Google revamped the [CWS Developer Policies](https://developer.chrome.com/docs/webstore/program-policies/) around three principals: be safe, be honest, be useful. These simple statements get to the core of what the policies aim to accomplish: enhance the user's web browsing experience without deception, fraud, mishandling of data, or disregard for the user's wishes.\n\nI mention that here because search monetization, by its very nature, can be considered a form of browser hijacking. From [Wikipedia](https://en.wikipedia.org/wiki/Browser_hijacking):\n\n> **Browser hijacking** is a form of [unwanted software](https://en.wikipedia.org/wiki/Potentially_unwanted_program) that modifies a [web browser](https://en.wikipedia.org/wiki/Web_browser)'s settings without a user's permission, to inject unwanted advertising into the user's browser. A browser hijacker may replace the existing [home page](https://en.wikipedia.org/wiki/Home_page), error page, or [search engine](https://en.wikipedia.org/wiki/Search_engine) with its own.[<sup>[1]</sup>](https://en.wikipedia.org/wiki/Browser_hijacking#cite_note-1) These are generally used to force [hits](https://en.wikipedia.org/wiki/Hit_(Internet)) to a particular [website](https://en.wikipedia.org/wiki/Website), increasing its [advertising](https://en.wikipedia.org/wiki/Online_advertising) revenue.\n\nLet's walk through some specific policies in order to see how search monetization may put your extension at risk. \n\n### Single purpose policy\n\nCWS has long had a \"single purpose policy\" (SPP) that essentially requires each extension have one well-defined raison d'être. Generally speaking, this means that all of the features an extension exposes must be part of a unifying theme. This policy is currently captured in the [Quality Guidelines](https://developer.chrome.com/docs/webstore/program-policies/quality-guidelines/) policies.\n\nOne area where SPP enforcement is stricter than average, though, is search. For the purposes of CWS review, changing a user's default search provider is considered a distinct purpose. In other words, if the search monetization service instructs you to declare a search provider in your extension's manifest with `\"is_default\": true`, that integration is basically guaranteed to violate this policy.\n\n### API use\n\nThe [API Use](https://developer.chrome.com/docs/webstore/program-policies/api-use/) policies require that developers \"use existing Chrome APIs for their designated use case. Use of any other method, for which an API exists, would be considered a violation.\"  If the extension is exposing a general purpose search box, the extension _must_ use [`chrome.search.query()`](https://developer.chrome.com/docs/extensions/reference/search/#method-query) (or [`browser.search.search()`](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/search/search) in Firefox) to perform the search. \n\n### Policies aimed at protecting user privacy\n\nIntegrating a search monetization service will likely violate a couple of the policies grouped under [Protecting User Privacy](https://developer.chrome.com/docs/webstore/program-policies/#protecting-user-privacy).\n\nThe [Limited Use](https://developer.chrome.com/docs/webstore/program-policies/limited-use/) policies requires that user data only be accessed/collected for purposes directly tied to the extension's purpose. Any data collected must be limited \"to the extent required for a user-facing feature described prominently in the Product's Chrome Web Store page and in the Product's user interface.\" \n\nSimilarly, the [Disclosure Requirements](https://developer.chrome.com/docs/webstore/program-policies/disclosure-requirements/) policies state that extensions must disclose the data they handle (collect, use, or share) and, if necessary, get informed user consent for that handling.\n\nWhile one might argue that the extension isn't collecting search data, it directly facilitates sending user data to a 3rd party service which may collect the user's data for advertising purposes. That data would not have been collected but for the fact that the user had the extension installed. At best, that's aiding and abetting – not a great defense to use when trying to get back into good standing.\n\nFinally, the [Misleading or Unexpected Behavior](https://developer.chrome.com/docs/webstore/program-policies/unexpected-behavior/) policies clearly state that extensions must not \"misrepresent the functionality of your product or include non-obvious functionality that doesn't serve the primary purpose of the product.\" \n\nLet's make this a bit more concrete with an example. Say you had an extension that exposed a search field that looked and mostly behaved like a standard search box in your browser. Now say that when you executed a search using that box, the results page was on a website you weren't used to seeing. I think it would be fair to say that the search box didn't behave as expected. \n\n## A compliant example\n\nAt the moment, I can only imagine one situation where it would be appropriate for an extension to execute a search without using the default search provider: if the extension is exposing specialized search capabilities related to its single purpose.\n\nFor example, let's say there is an extension designed to help users find, collect, reference, and site academic papers. This extension could expose a search box that lets users search through the academic databases and industry journals they are signed into. This type of search is directly related to the extension's primary purpose, makes sense in context, respects the user's preferences, and does not introduce new privacy concerns. \n\n## Wrap up\n\nTrying to monetize an extension by sending search traffic to a non-standard search provider is, at best, risky business. Browser hijacking is a serious threat to users and anything that looks like it has a very real risk of being classified as malware.\n\nMy advice: steer clear of offers to monetize your extension via search revenue sharing.\n",
				"date_published": "2023-06-06T21:47:48+01:00",
				"url": "https://dotproto.com/2023/06/06/a-warning-about.html",
				"tags": ["webextensions","cws-policy","monetization"]
			},
			{
				"id": "http://dotproto.micro.blog/2023/05/04/google-ads-in.html",
				"title": "Google Ads in Browser Extensions",
				"content_html": "<p>Chrome Web Store policy allows ads in extensions, but can Google&rsquo;s ad products be used in browser extensions? Let&rsquo;s dig through some policy docs to find out.</p>\n<p>Someone  posted a question in the <a href=\"https://groups.google.com/a/chromium.org/g/chromium-extensions\">chromium-extensions</a> Google Group a couple weeks ago asking whether they were allowed to use Google Ads in browser extensions. When I last looked into this I worked on the Chrome Extensions team and the short answer was &ldquo;you can&rsquo;t use Google&rsquo;s ad services, but you can use other services if the policies of those services allow it.&rdquo;</p>\n<p>Since then my relationship with this question has changed. Google and I have parted ways, I began building my <a href=\"https://incremental.software\">extension dev consultancy</a>, and I&rsquo;m looking for other revenue streams to diversify my income. In other words, this question is more relevant to me than ever before. So, let’s see if we can&rsquo;t get a hard answer.</p>\n<p>In this post we’ll be taking a look at a few different Google policy sites and seeing what (if anything) they have to say about browser extensions.</p>\n<h2 id=\"chrome-web-store-policies\">Chrome Web Store policies</h2>\n<p>Let’s start by reviewing the Chrome Web Store’s <a href=\"https://developer.chrome.com/docs/webstore/program-policies\">Program Policies</a>. The <a href=\"https://developer.chrome.com/docs/webstore/program-policies/ads/\">Ads policies</a> basically says that extensions can display ads as long as they conform to some specific requirements. One of those requirements immediately raises a red flag when it comes to inegrating Google ads.</p>\n<blockquote>\n<ol start=\"3\">\n<li>Currently, AdSense may not be used to serve ads in Products, per <a href=\"https://support.google.com/adsense/answer/48182\">AdSense policies</a>.</li>\n</ol>\n</blockquote>\n<p>If you do a web search for a set of terms like <code>chrome extension google ads</code> you&rsquo;ll probably see posts on StackOverflow where people quote this and throw up their hands. But this in itself isn&rsquo;t a prohibition; it&rsquo;s an attempt to summarize <em>someone else&rsquo;s</em> prohibition. Let&rsquo;s see if we can&rsquo;t track down a primary source for this.</p>\n<h2 id=\"adsense-program-policies\">AdSense Program policies</h2>\n<p>Following AdSense Policies link takes us to the <a href=\"https://support.google.com/adsense/answer/48182\">AdSense Program policies page</a> page. The first thing I do when trying to quickly grok something like this is search the page for relevant terms. The word &ldquo;extension&rdquo; doesn&rsquo;t appear anywhere on the this page and the word &ldquo;browser&rdquo; only appears twice. Looks like i&rsquo;ll actually have to dig into the text and try to divine the spirit of their meaning.</p>\n<p>I&rsquo;ll spare you the blow-by-blow analysis and I&rsquo;ll summarize most of this page is just absolutely hammering home that Google <em>really</em> don&rsquo;t want publishers (the site showing ads) to do an ad fraud. Beyond that, there are only a couple of passages related to the question we&rsquo;re trying to answer.</p>\n<blockquote>\n<p><strong>Ad placement</strong></p>\n<p>Publishers are encouraged to experiment with a variety of placements and ad formats. However, <!-- raw HTML omitted -->AdSense code may not be placed in inappropriate places such as pop-ups, emails or software<!-- raw HTML omitted -->. Publishers must also adhere to the policies for each product used. Please see our <a href=\"https://support.google.com/adsense/answer/1346295\">ad placement policies</a> article for more information.</p>\n</blockquote>\n<p>The second sentence in this passage describes &ldquo;software&rdquo; as an inappropriate place to display AdSense ads. That&rsquo;s a pretty broad category, but writ large they appear to be saying that AdSense may only be used to monetize websites. To drive that point home they continue:</p>\n<blockquote>\n<p>Google ads, search boxes or search results may not be:</p>\n<ul>\n<li>Integrated into a software application (does not apply to AdMob) of any kind, including toolbars.</li>\n</ul>\n</blockquote>\n<p>The use of &ldquo;including toolbars&rdquo; here is interesting. As previously mentioned, this document doesn&rsquo;t use the word &ldquo;extension,&rdquo; so this (dated) reference to Internet Explorer toolbars is about as close as we&rsquo;ll get and their stance seems clear.</p>\n<p>But to drive the point home, let&rsquo;s follow that &ldquo;ad placement policies&rdquo; link from the first quotation and see what they have to say.</p>\n<blockquote>\n<p><strong>Ads in a software application</strong></p>\n<p><!-- raw HTML omitted -->Publishers are not permitted to distribute Google ads or AdSense for search boxes through software applications including<!-- raw HTML omitted -->, but not limited to toolbars, <!-- raw HTML omitted -->browser extensions<!-- raw HTML omitted -->, and desktop applications. AdSense code may only be implemented on web-based pages and approved WebView technologies.</p>\n</blockquote>\n<p>That&rsquo;s about as explicit a prohibition as I could imagine. But, I should note that the first paragraph of page explicitly identifies the page as covering &ldquo;Adsense ad placement policies.&rdquo; That&rsquo;s critical because didn&rsquo;t shut the door on Google Ads in extensions: there&rsquo;s an AdMob-shaped escape hatch we can look into.</p>\n<h2 id=\"admobs-behavioral-policies\">AdMob&rsquo;s Behavioral policies</h2>\n<p>AdMob is governed by the AdSense program policies, but with some additional exceptions and guidance for this specific product. On a side note, I don&rsquo;t know why they decided to name the page that provides that guidance &ldquo;<a href=\"https://support.google.com/admob/answer/2753860\">Behavioral policies</a>&rdquo; rather than something like &ldquo;AdMob product policies&rdquo; but, well, there it is.</p>\n<blockquote>\n<p><strong>Exceptions to AdSense policie</strong></p>\n<p>In principle, all AdMob publishers must follow our online program policies, however there are certain policies that differ between AdSense and AdMob. Please see the exceptions below.</p>\n</blockquote>\n<p>&ldquo;Ad placement&rdquo; presented a problem in the AdSense policies, so what does AdMob policy say?</p>\n<blockquote>\n<p><strong>Ad placement</strong></p>\n<p>Publishers are encouraged to experiment with a variety of placements and ad formats, but must comply with the <a href=\"https://support.google.com/admob/answer/9335564\">Google Publisher Policies</a>. Please also review our <a href=\"https://support.google.com/admob/answer/2936217?sjid=12229413281836938645-NA\">implementation guidance</a>.</p>\n</blockquote>\n<h2 id=\"adsense-implementation-guidance\">AdSense Implementation guidance</h2>\n<p>The <a href=\"https://support.google.com/admob/answer/2936217?sjid=12229413281836938645-NA\">Implementation guidance</a> page doesn&rsquo;t contain any explicit mention of extensions/toolbars or other language similar to what we saw before about not allowing ads in certain types of software. It does, however, contain the following guidance:</p>\n<blockquote>\n<p><strong>Integrate the latest SDK</strong></p>\n<p>It&rsquo;s important to always stay updated with the latest SDK (for <a href=\"https://developers.google.com/admob/android/sdk\">Android</a>, <a href=\"https://developers.google.com/admob/ios/download\">iOS</a>), which will give you access to the latest ad formats, features, and bug fixes.</p>\n</blockquote>\n<p>This passage is interesting because it implies that SDK integration is important without explicitly saying it&rsquo;s required.</p>\n<p>So, <em>is</em> it required? Let&rsquo;s see what the AdSesne and AdMob policy pages have to say. The <a href=\"https://support.google.com/admob/answer/2753860\">AdMob policy</a> page references the this SDK and the fact that it&rsquo;s used to serve personalized ads:</p>\n<blockquote>\n<p><strong>Personalized advertising</strong></p>\n<p>Google may use the advertising ID from the device on which the ad is serving to generate interests and demographics (for example, &lsquo;sports enthusiasts&rsquo;). Interests, demographics, and other data may be used to serve better targeted ads to the user. Additionally, your app&rsquo;s privacy policy may need to be updated to reflect the use of <!-- raw HTML omitted -->personalized advertising (formerly known as interest-based advertising) served via the Google Mobile Ads SDK<!-- raw HTML omitted -->.</p>\n</blockquote>\n<p>Again, this does not explicitly say that the SDK must be used, but that fact is heavily implied.</p>\n<p>The smoking gun appears on the <a href=\"https://support.google.com/adsense/answer/48182\">AdSense Program policies</a> page in the &ldquo;Technical requirements for web content viewing frames for apps&rdquo; section.</p>\n<blockquote>\n<ol>\n<li>\n<p>WebView API for Ads<!-- raw HTML omitted -->App developers are encouraged to integrate the WebView API for Ads to register WebView instances (Android: <a href=\"https://developer.android.com/reference/android/webkit/WebView\">WebView</a>, iOS: <a href=\"https://developer.apple.com/documentation/webkit/wkwebview\">WKWebView</a>) with Google Mobile Ads SDK.</p>\n<p>[…]</p>\n<p>AdMob and Ad Manager in-app ads may be shown in an app next to a WebView as long as the Google Mobile Ads SDK is in use and the publisher is compliant with all other relevant program policies and guidelines.</p>\n</li>\n</ol>\n</blockquote>\n<p>I read this section as saying that developers MUST use the <a href=\"https://developers.google.com/ad-manager/mobile-ads-sdk\">Google Mobile Ads SDK</a> to manage AdMob and Ad Manager ads. There&rsquo;s only one problem: Google doesn&rsquo;t provide a JavaScript SDK. They have Android, iOS, and Flutter SDKs.</p>\n<p>Well … shucks.</p>\n<h2 id=\"wrap-up\">Wrap up</h2>\n<p>We ran through a bunch of different Google Ads policy documents to try to figure out whether or not browser extension developers can integrate Google Ads in their products. Here&rsquo;s what we found:</p>\n<ul>\n<li><strong>AdSense</strong>\n<ul>\n<li>Forbidden from appearing in browser extensions (<a href=\"https://support.google.com/adsense/answer/1346295\">source</a>).</li>\n</ul>\n</li>\n<li><strong>AdMob</strong>\n<ul>\n<li>Policy does not forbid these ads from appearing in extensions.</li>\n<li>Ads must be handled by the <a href=\"https://developers.google.com/ad-manager/mobile-ads-sdk\">Google Mobile Ads SDK</a>.</li>\n<li>There is no JavaScript version of this SDK.</li>\n</ul>\n</li>\n</ul>\n<p>Given all that, it looks like there&rsquo;s currently no policy-compliant way to display Google Ads in a browser extension. This could change if either (a) Google allowed extensions to use AsSense or (b) Google provided either a WebExtension SDK or a JavaScript SDK.</p>",
				"content_text": "Chrome Web Store policy allows ads in extensions, but can Google's ad products be used in browser extensions? Let's dig through some policy docs to find out.\n\n<!--more-->\n\nSomeone  posted a question in the [chromium-extensions][crx] Google Group a couple weeks ago asking whether they were allowed to use Google Ads in browser extensions. When I last looked into this I worked on the Chrome Extensions team and the short answer was \"you can't use Google's ad services, but you can use other services if the policies of those services allow it.\"\n\nSince then my relationship with this question has changed. Google and I have parted ways, I began building my [extension dev consultancy][inc], and I'm looking for other revenue streams to diversify my income. In other words, this question is more relevant to me than ever before. So, let’s see if we can't get a hard answer. \n\nIn this post we’ll be taking a look at a few different Google policy sites and seeing what (if anything) they have to say about browser extensions.\n\n## Chrome Web Store policies\n\nLet’s start by reviewing the Chrome Web Store’s [Program Policies][cws-pp]. The [Ads policies][cws-ads] basically says that extensions can display ads as long as they conform to some specific requirements. One of those requirements immediately raises a red flag when it comes to inegrating Google ads.\n\n> 3. Currently, AdSense may not be used to serve ads in Products, per [AdSense policies][as].\n\nIf you do a web search for a set of terms like `chrome extension google ads` you'll probably see posts on StackOverflow where people quote this and throw up their hands. But this in itself isn't a prohibition; it's an attempt to summarize _someone else's_ prohibition. Let's see if we can't track down a primary source for this.\n\n## AdSense Program policies\n\nFollowing AdSense Policies link takes us to the [AdSense Program policies page][as] page. The first thing I do when trying to quickly grok something like this is search the page for relevant terms. The word \"extension\" doesn't appear anywhere on the this page and the word \"browser\" only appears twice. Looks like i'll actually have to dig into the text and try to divine the spirit of their meaning.\n\nI'll spare you the blow-by-blow analysis and I'll summarize most of this page is just absolutely hammering home that Google _really_ don't want publishers (the site showing ads) to do an ad fraud. Beyond that, there are only a couple of passages related to the question we're trying to answer.\n\n> **Ad placement**\n>\n> Publishers are encouraged to experiment with a variety of placements and ad formats. However, <span style=\"background-color: lightgoldenrodyellow; padding: 0 3px; border-radius: 3px;\">AdSense code may not be placed in inappropriate places such as pop-ups, emails or software</span>. Publishers must also adhere to the policies for each product used. Please see our [ad placement policies][placement] article for more information.\n\nThe second sentence in this passage describes \"software\" as an inappropriate place to display AdSense ads. That's a pretty broad category, but writ large they appear to be saying that AdSense may only be used to monetize websites. To drive that point home they continue:\n\n> Google ads, search boxes or search results may not be:\n> \n> * Integrated into a software application (does not apply to AdMob) of any kind, including toolbars.\n\nThe use of \"including toolbars\" here is interesting. As previously mentioned, this document doesn't use the word \"extension,\" so this (dated) reference to Internet Explorer toolbars is about as close as we'll get and their stance seems clear. \n\nBut to drive the point home, let's follow that \"ad placement policies\" link from the first quotation and see what they have to say.\n\n> **Ads in a software application**\n>\n> <span style=\"background-color: lightgoldenrodyellow; padding: 0 3px; border-radius: 3px;\">Publishers are not permitted to distribute Google ads or AdSense for search boxes through software applications including</span>, but not limited to toolbars, <span style=\"background-color: lightgoldenrodyellow; padding: 0 3px; border-radius: 3px;\">browser extensions</span>, and desktop applications. AdSense code may only be implemented on web-based pages and approved WebView technologies.\n\nThat's about as explicit a prohibition as I could imagine. But, I should note that the first paragraph of page explicitly identifies the page as covering \"Adsense ad placement policies.\" That's critical because didn't shut the door on Google Ads in extensions: there's an AdMob-shaped escape hatch we can look into.\n\n## AdMob's Behavioral policies\n\nAdMob is governed by the AdSense program policies, but with some additional exceptions and guidance for this specific product. On a side note, I don't know why they decided to name the page that provides that guidance \"[Behavioral policies][bp]\" rather than something like \"AdMob product policies\" but, well, there it is.\n\n> **Exceptions to AdSense policie**\n> \n> In principle, all AdMob publishers must follow our online program policies, however there are certain policies that differ between AdSense and AdMob. Please see the exceptions below.\n\n\"Ad placement\" presented a problem in the AdSense policies, so what does AdMob policy say?\n\n> **Ad placement**\n>\n> Publishers are encouraged to experiment with a variety of placements and ad formats, but must comply with the [Google Publisher Policies][gpp]. Please also review our [implementation guidance][ig].\n\n## AdSense Implementation guidance\n\nThe [Implementation guidance][ig] page doesn't contain any explicit mention of extensions/toolbars or other language similar to what we saw before about not allowing ads in certain types of software. It does, however, contain the following guidance:\n\n> **Integrate the latest SDK**\n> \n> It's important to always stay updated with the latest SDK (for [Android](https://developers.google.com/admob/android/sdk), [iOS](https://developers.google.com/admob/ios/download)), which will give you access to the latest ad formats, features, and bug fixes.\n\nThis passage is interesting because it implies that SDK integration is important without explicitly saying it's required.\n\nSo, _is_ it required? Let's see what the AdSesne and AdMob policy pages have to say. The [AdMob policy][bp] page references the this SDK and the fact that it's used to serve personalized ads:\n\n> **Personalized advertising**\n>\n> Google may use the advertising ID from the device on which the ad is serving to generate interests and demographics (for example, 'sports enthusiasts'). Interests, demographics, and other data may be used to serve better targeted ads to the user. Additionally, your app's privacy policy may need to be updated to reflect the use of <span style=\"background-color: lightgoldenrod; padding: 0 3px; border-radius: 3px;\">personalized advertising (formerly known as interest-based advertising) served via the Google Mobile Ads SDK</span>. \n\nAgain, this does not explicitly say that the SDK must be used, but that fact is heavily implied.\n\nThe smoking gun appears on the [AdSense Program policies][as] page in the \"Technical requirements for web content viewing frames for apps\" section.\n\n> 1. WebView API for Ads<br>App developers are encouraged to integrate the WebView API for Ads to register WebView instances (Android: [WebView](https://developer.android.com/reference/android/webkit/WebView), iOS: [WKWebView](https://developer.apple.com/documentation/webkit/wkwebview)) with Google Mobile Ads SDK.\n>\n>    […]\n> \n>    AdMob and Ad Manager in-app ads may be shown in an app next to a WebView as long as the Google Mobile Ads SDK is in use and the publisher is compliant with all other relevant program policies and guidelines.\n\nI read this section as saying that developers MUST use the [Google Mobile Ads SDK][gmasdk] to manage AdMob and Ad Manager ads. There's only one problem: Google doesn't provide a JavaScript SDK. They have Android, iOS, and Flutter SDKs. \n\nWell … shucks.\n\n## Wrap up\n\nWe ran through a bunch of different Google Ads policy documents to try to figure out whether or not browser extension developers can integrate Google Ads in their products. Here's what we found:\n\n* **AdSense**\n    * Forbidden from appearing in browser extensions ([source][placement]).\n* **AdMob**\n    * Policy does not forbid these ads from appearing in extensions.\n    * Ads must be handled by the [Google Mobile Ads SDK][gmasdk].\n    * There is no JavaScript version of this SDK.\n\nGiven all that, it looks like there's currently no policy-compliant way to display Google Ads in a browser extension. This could change if either (a) Google allowed extensions to use AsSense or (b) Google provided either a WebExtension SDK or a JavaScript SDK.\n\n[crx]: https://groups.google.com/a/chromium.org/g/chromium-extensions\n[inc]: https://incremental.software\n[cws-pp]: https://developer.chrome.com/docs/webstore/program-policies\n[cws-ads]:https://developer.chrome.com/docs/webstore/program-policies/ads/\n[as]: https://support.google.com/adsense/answer/48182\n[placement]: https://support.google.com/adsense/answer/1346295\n[bp]: https://support.google.com/admob/answer/2753860\n[gpp]: https://support.google.com/admob/answer/9335564\n[ig]: https://support.google.com/admob/answer/2936217?sjid=12229413281836938645-NA\n[gmasdk]: https://developers.google.com/ad-manager/mobile-ads-sdk\n",
				"date_published": "2023-05-08T19:26:13+01:00",
				"url": "https://dotproto.com/2023/05/04/google-ads-in.html",
				"tags": ["webextensions","cws-policy","monetization"]
			},
			{
				"id": "http://dotproto.micro.blog/2023/02/28/microblog-thoughts-discovery.html",
				"title": "Micro.blog thoughts #4: Discovery and organization",
				"content_html": "<p>Came across <a href=\"https://grepjason.sh/discover/\">grepjason.sh/discover/</a> (via <a href=\"https://help.micro.blog/t/emoji-in-discover/34\">the docs</a>) when looking for more info about how to find people talking about stuff I&rsquo;m interested in. It&rsquo;s an overly large bucket, but I&rsquo;d still very much like to see <a href=\"https://micro.blog/burk\">@burk</a>&rsquo;s suggestion of a 💻 tagmoji for &ldquo;Technology/Programming&rdquo;. As someone specifically interested in the web and web browsers, I&rsquo;d selfishly like to suggest 🕸 for &ldquo;Internet/Web&rdquo;.</p>\n<p>Even if it&rsquo;s not surfaced to other Micro.blog users, I&rsquo;d love to see a way for a user to tag or otherwise organize their own posts. This omission seems a bit surprising given Micro.blog&rsquo;s emphasis on users hosting their blogs on their own domains.</p>\n<p><strong>Thread</strong></p>\n<ul>\n<li>Previous: <a href=\"https://dotproto.com/2023/02/28/microblog-thoughts-posts.html\">Micro.blog thoughts #3: posts &gt;300 characters</a></li>\n</ul>\n",
				"content_text": "Came across [grepjason.sh/discover/](https://grepjason.sh/discover/) (via [the docs](https://help.micro.blog/t/emoji-in-discover/34)) when looking for more info about how to find people talking about stuff I'm interested in. It's an overly large bucket, but I'd still very much like to see [@burk](https://micro.blog/burk)'s suggestion of a 💻 tagmoji for \"Technology/Programming\". As someone specifically interested in the web and web browsers, I'd selfishly like to suggest 🕸 for \"Internet/Web\".\n\nEven if it's not surfaced to other Micro.blog users, I'd love to see a way for a user to tag or otherwise organize their own posts. This omission seems a bit surprising given Micro.blog's emphasis on users hosting their blogs on their own domains.\n\n**Thread**\n\n* Previous: [Micro.blog thoughts #3: posts >300 characters](https://dotproto.com/2023/02/28/microblog-thoughts-posts.html)\n",
				"date_published": "2023-02-28T23:13:42+01:00",
				"url": "https://dotproto.com/2023/02/28/microblog-thoughts-discovery.html"
			},
			{
				"id": "http://dotproto.micro.blog/2023/02/28/microblog-thoughts-posts.html",
				"title": "Micro.blog thoughts #3: posts \u003e300 characters",
				"content_html": "<p>Next weird thing, the UX around adding titles is odd. I know posts don&rsquo;t have a hard 300 character limit. The docs suggest giving your post a title when it&rsquo;s over 300 characters, but it&rsquo;s not clear what that looks or feels like. Does only the title appear in the feed? If we jack into Hugo-level customizations can users provide a metadata field for a description and use that instead?</p>\n<p>As a new user, it&rsquo;s odd and surprising to me that the title field doesn&rsquo;t even appear in the editor UI until the draft post contains at least 300 characters. I just checked for an account level setting to make this setting always appear, but no dice. That might be good fodder for a browser extension.</p>\n<p><strong>Thread</strong></p>\n<ul>\n<li>Previous: <a href=\"https://dotproto.com/2023/02/28/re-dotprotocom-new.html\">Micro.blog thoughts #2: Threading</a></li>\n<li>Next: <a href=\"https://dotproto.com/2023/02/28/microblog-thoughts-discovery.html\">Micro.blog thoughts #4: Discovery and organization</a></li>\n</ul>\n",
				"content_text": "Next weird thing, the UX around adding titles is odd. I know posts don't have a hard 300 character limit. The docs suggest giving your post a title when it's over 300 characters, but it's not clear what that looks or feels like. Does only the title appear in the feed? If we jack into Hugo-level customizations can users provide a metadata field for a description and use that instead? \n\nAs a new user, it's odd and surprising to me that the title field doesn't even appear in the editor UI until the draft post contains at least 300 characters. I just checked for an account level setting to make this setting always appear, but no dice. That might be good fodder for a browser extension. \n\n**Thread**\n\n* Previous: [Micro.blog thoughts #2: Threading](https://dotproto.com/2023/02/28/re-dotprotocom-new.html)\n* Next: [Micro.blog thoughts #4: Discovery and organization](https://dotproto.com/2023/02/28/microblog-thoughts-discovery.html)\n",
				"date_published": "2023-02-28T22:58:09+01:00",
				"url": "https://dotproto.com/2023/02/28/microblog-thoughts-posts.html"
			},
			{
				"id": "http://dotproto.micro.blog/2023/02/28/re-dotprotocom-new.html",
				"title": "Micro.blog thoughts #2: Threading",
				"content_html": "<p>Re: <a href=\"https://dotproto.com/2023/02/28/im-trying-to.html\">dotproto.com/2023/02/2&hellip;</a></p>\n<p>New stumbling block: threading. There&rsquo;s no obvious way to link multiple microblog posts together. For the moment I guess I&rsquo;ll fall back to manually referencing the previous post as I have here, but that&rsquo;s obviously not ideal.</p>\n<p>EDIT: The original approach I used was to add &ldquo;Re: [LINK TO PREVIOUS POST]&rdquo; on the first line. I&rsquo;m replacing that with a manually created &ldquo;previous&rdquo; and &ldquo;next&rdquo; footer links.</p>\n<p><strong>Thread</strong></p>\n<ul>\n<li>Previous: <a href=\"https://dotproto.com/2023/02/28/im-trying-to.html\">Micro.blog thoughts #1: Am noob, send help</a></li>\n<li>Next: <a href=\"https://dotproto.com/2023/02/28/microblog-thoughts-posts.html\">Micro.blog thoughts #3: posts &gt;300 characters</a></li>\n</ul>\n",
				"content_text": "Re: [dotproto.com/2023/02/2...](https://dotproto.com/2023/02/28/im-trying-to.html)\n\nNew stumbling block: threading. There's no obvious way to link multiple microblog posts together. For the moment I guess I'll fall back to manually referencing the previous post as I have here, but that's obviously not ideal.\n\nEDIT: The original approach I used was to add \"Re: [LINK TO PREVIOUS POST]\" on the first line. I'm replacing that with a manually created \"previous\" and \"next\" footer links.\n\n**Thread**\n\n* Previous: [Micro.blog thoughts #1: Am noob, send help](https://dotproto.com/2023/02/28/im-trying-to.html)\n* Next: [Micro.blog thoughts #3: posts >300 characters](https://dotproto.com/2023/02/28/microblog-thoughts-posts.html)\n",
				"date_published": "2023-02-28T22:49:32+01:00",
				"url": "https://dotproto.com/2023/02/28/re-dotprotocom-new.html"
			},
			{
				"id": "http://dotproto.micro.blog/2023/02/28/im-trying-to.html",
				"title": "Micro.blog thoughts #1: Am noob, send help",
				"content_html": "<p>I&rsquo;m trying to wrap my head around how to engage with the micro.blog community and I feel like I&rsquo;m grasping at straws. If you&rsquo;re already here and active, you probably have a pool of people that you read, but as someone with no existing ties I feel adrift. <a href=\"https://micro.blog/discover\">micro.blog/discover</a> is too limited :/</p>\n<p><strong>Thread</strong></p>\n<ul>\n<li>Next: <a href=\"https://dotproto.com/2023/02/28/re-dotprotocom-new.html\">Micro.blog thoughts #2: Threading</a></li>\n</ul>\n",
				"content_text": "I'm trying to wrap my head around how to engage with the micro.blog community and I feel like I'm grasping at straws. If you're already here and active, you probably have a pool of people that you read, but as someone with no existing ties I feel adrift. [micro.blog/discover](https://micro.blog/discover) is too limited :/\n\n**Thread**\n\n* Next: [Micro.blog thoughts #2: Threading](https://dotproto.com/2023/02/28/re-dotprotocom-new.html)\n",
				"date_published": "2023-02-28T22:45:53+01:00",
				"url": "https://dotproto.com/2023/02/28/im-trying-to.html"
			}
	]
}
